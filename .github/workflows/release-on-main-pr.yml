name: Release on Main PR Merge

on:
  push:
    branches:
      - main

jobs:
  tag-and-release:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: sudo apt-get update && sudo apt-get install -y gh jq

      - name: Get version from package.json
        id: version
        run: |
          VERSION=$(jq -r .version package.json)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=v$VERSION" >> $GITHUB_OUTPUT

      - name: Check if tag already exists
        id: tag-check
        run: |
          if git ls-remote --tags origin | grep -q "refs/tags/v${VERSION}"; then
            echo "Tag v${VERSION} already exists. Skipping release."
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Tag v${VERSION} does not exist. Proceeding."
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Get latest merged PR info
        id: pr
        if: steps.tag-check.outputs.exists == 'false'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_INFO=$(gh pr list --state merged --base main --limit 10 --json number,mergedAt | jq 'sort_by(.mergedAt) | reverse | .[0]')
          PR_NUMBER=$(echo "$PR_INFO" | jq -r '.number')
          
          PR_DATA=$(gh pr view "$PR_NUMBER" --json title,body,commits)
          
          PR_TITLE=$(echo "$PR_DATA" | jq -r '.title // "No title"')
          PR_BODY=$(echo "$PR_DATA" | jq -r '.body // "No description"')
          PR_COMMITS=$(echo "$PR_DATA" | jq -r '.commits | map("- " + .messageHeadline) | join("\n")')
          
          echo "RELEASE_TITLE=$PR_TITLE" >> $GITHUB_ENV
          echo -e "$PR_BODY\n\n### Commits:\n$PR_COMMITS" > release_body.txt

      - name: Create Git tag
        if: steps.tag-check.outputs.exists == 'false'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git tag v${VERSION}
          git push origin v${VERSION}

      - name: Create GitHub Release
        if: steps.tag-check.outputs.exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}
          name: ${{ env.RELEASE_TITLE }}
          body_path: release_body.txt